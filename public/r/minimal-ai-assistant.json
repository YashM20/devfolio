{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "minimal-ai-assistant",
  "type": "registry:component",
  "title": "Minimal AI Assistant",
  "author": "yash_mhj",
  "description": "A minimal, customizable AI assistant component with multiple themes and chat functionality.",
  "dependencies": [
    "motion",
    "@ai-sdk/react",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://yash.reactopia.me/r/utils.json"
  ],
  "files": [
    {
      "path": "src/registry/minimal-ai-assistant/ai-assistant.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { useChat } from \"@ai-sdk/react\";\nimport { Send, MessageCircle, X, Bot, User, Trash2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\n// Context for AI Assistant\ntype AiAssistantContextProps = {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  isTyping: boolean;\n  setIsTyping: (typing: boolean) => void;\n  messages: any[];\n  sendMessage: (message: any) => void;\n  setMessages: (messages: any[]) => void;\n  error: any;\n  onMessageSent?: (message: string) => void;\n  onResponse?: (response: string) => void;\n  onError?: (error: string) => void;\n};\n\nconst AiAssistantContext = React.createContext<AiAssistantContextProps | null>(\n  null\n);\n\nfunction useAiAssistant() {\n  const context = React.useContext(AiAssistantContext);\n  if (!context) {\n    throw new Error(\n      \"useAiAssistant must be used within an AiAssistantProvider.\"\n    );\n  }\n  return context;\n}\n\n// Provider component\ninterface AiAssistantProviderProps {\n  children: React.ReactNode;\n  onMessageSent?: (message: string) => void;\n  onResponse?: (response: string) => void;\n  onError?: (error: string) => void;\n}\n\nfunction AiAssistantProvider({\n  children,\n  onMessageSent,\n  onResponse,\n  onError,\n}: AiAssistantProviderProps) {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [isTyping, setIsTyping] = React.useState(false);\n\n  const { messages, sendMessage, setMessages, error } = useChat({\n    onFinish: () => {\n      setIsTyping(false);\n      // Extract the last assistant message content\n      const lastMessage = messages[messages.length - 1];\n      if (lastMessage && lastMessage.role === \"assistant\") {\n        if (lastMessage.parts) {\n          const textParts = lastMessage.parts\n            .filter((part: any) => part.type === \"text\")\n            .map((part: any) => part.text)\n            .join(\"\");\n          onResponse?.(textParts);\n        }\n      }\n    },\n    onError: (error) => {\n      setIsTyping(false);\n      onError?.(error.message);\n    },\n  });\n\n  const contextValue = React.useMemo<AiAssistantContextProps>(\n    () => ({\n      isOpen,\n      setIsOpen,\n      isTyping,\n      setIsTyping,\n      messages,\n      sendMessage,\n      setMessages,\n      error,\n      onMessageSent,\n      onResponse,\n      onError,\n    }),\n    [\n      isOpen,\n      setIsOpen,\n      isTyping,\n      setIsTyping,\n      messages,\n      sendMessage,\n      setMessages,\n      error,\n      onMessageSent,\n      onResponse,\n      onError,\n    ]\n  );\n\n  return (\n    <AiAssistantContext.Provider value={contextValue}>\n      {children}\n    </AiAssistantContext.Provider>\n  );\n}\n\n// Trigger button variants\nconst aiAssistantTriggerVariants = cva(\n  \"focus-visible:ring-ring inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border-input bg-background hover:bg-accent hover:text-accent-foreground border\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n      position: {\n        \"bottom-right\": \"absolute bottom-4 right-4 z-50\",\n        \"bottom-center\": \"absolute bottom-4 left-1/2 z-50 -translate-x-1/2\",\n        \"bottom-left\": \"absolute bottom-4 left-4 z-50\",\n        \"top-right\": \"absolute right-4 top-4 z-50\",\n        \"top-center\": \"absolute left-1/2 top-4 z-50 -translate-x-1/2\",\n        \"top-left\": \"absolute left-4 top-4 z-50\",\n        static: \"relative\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      position: \"bottom-right\",\n    },\n  }\n);\n\n// Trigger component\ninterface AiAssistantTriggerProps\n  extends VariantProps<typeof aiAssistantTriggerVariants> {\n  asChild?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n  disabled?: boolean;\n  type?: \"button\" | \"submit\" | \"reset\";\n  form?: string;\n  formAction?: string;\n  formEncType?: string;\n  formMethod?: string;\n  formNoValidate?: boolean;\n  formTarget?: string;\n  name?: string;\n  value?: string | ReadonlyArray<string> | number;\n  autoFocus?: boolean;\n  tabIndex?: number;\n  \"aria-label\"?: string;\n  \"aria-labelledby\"?: string;\n  \"aria-describedby\"?: string;\n  id?: string;\n  title?: string;\n  role?: string;\n  style?: React.CSSProperties;\n}\n\nfunction AiAssistantTrigger({\n  className,\n  variant,\n  size,\n  position,\n  asChild = false,\n  children,\n  ...props\n}: AiAssistantTriggerProps) {\n  const { isOpen, setIsOpen } = useAiAssistant();\n\n  if (isOpen) return null;\n\n  const handleClick = () => setIsOpen(true);\n\n  if (asChild) {\n    return (\n      <Slot\n        className={cn(\n          aiAssistantTriggerVariants({ variant, size, position, className })\n        )}\n        onClick={handleClick}\n        {...props}\n      >\n        {children}\n      </Slot>\n    );\n  }\n\n  return (\n    <motion.button\n      initial={{ scale: 0 }}\n      animate={{ scale: 1 }}\n      exit={{ scale: 0 }}\n      className={cn(\n        aiAssistantTriggerVariants({ variant, size, position, className })\n      )}\n      onClick={handleClick}\n      {...props}\n    >\n      {children || (\n        <>\n          <MessageCircle className=\"h-4 w-4\" />\n          Chat\n        </>\n      )}\n    </motion.button>\n  );\n}\n\n// Chat container variants\nconst aiAssistantChatVariants = cva(\n  \"bg-background flex flex-col overflow-hidden rounded-lg border shadow-lg transition-all duration-300\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border\",\n        ghost: \"border-transparent shadow-none\",\n        outline: \"border-2\",\n      },\n      size: {\n        default: \"h-[32rem] w-96\",\n        sm: \"h-80 w-80\",\n        lg: \"h-[40rem] w-[28rem]\",\n        full: \"h-full w-full\",\n      },\n      position: {\n        \"bottom-right\": \"fixed bottom-4 right-4 z-50\",\n        \"bottom-center\": \"fixed bottom-4 left-1/2 z-50 -translate-x-1/2\",\n        \"bottom-left\": \"fixed bottom-4 left-4 z-50\",\n        \"top-right\": \"fixed right-4 top-4 z-50\",\n        \"top-center\": \"fixed left-1/2 top-4 z-50 -translate-x-1/2\",\n        \"top-left\": \"fixed left-4 top-4 z-50\",\n        static: \"relative\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      position: \"bottom-right\",\n    },\n  }\n);\n\n// Chat container component\ninterface AiAssistantChatProps\n  extends React.ComponentProps<typeof motion.div>,\n    VariantProps<typeof aiAssistantChatVariants> {}\n\nfunction AiAssistantChat({\n  className,\n  variant,\n  size,\n  position,\n  children,\n  ...props\n}: AiAssistantChatProps) {\n  const { isOpen } = useAiAssistant();\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, scale: 0.8, y: 20 }}\n        animate={{\n          opacity: 1,\n          scale: 1,\n          y: 0,\n        }}\n        exit={{ opacity: 0, scale: 0.8, y: 20 }}\n        className={cn(\n          aiAssistantChatVariants({ variant, size, position }),\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n\n// Header component\nfunction AiAssistantHeader({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      className={cn(\n        \"bg-muted/50 flex items-center justify-between border-b p-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\n// Header title component\nfunction AiAssistantHeaderTitle({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div className={cn(\"flex items-center gap-3\", className)} {...props}>\n      <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-r from-blue-500 to-purple-500\">\n        <Bot className=\"h-4 w-4 text-white\" />\n      </div>\n      <h3 className=\"font-semibold\">{children || \"AI Assistant\"}</h3>\n    </div>\n  );\n}\n\n// Header actions component\nfunction AiAssistantHeaderActions({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  const { setMessages, setIsOpen } = useAiAssistant();\n\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)} {...props}>\n      {children || (\n        <>\n          <button\n            onClick={() => setMessages([])}\n            className=\"hover:bg-accent rounded p-1 transition-colors\"\n            title=\"Clear chat\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </button>\n          <button\n            onClick={() => setIsOpen(false)}\n            className=\"hover:bg-accent rounded p-1 transition-colors\"\n            title=\"Close\"\n          >\n            <X className=\"h-4 w-4\" />\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\n// Messages container component\nfunction AiAssistantMessages({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  const messagesEndRef = React.useRef<HTMLDivElement>(null);\n  const { messages } = useAiAssistant();\n\n  // Auto-scroll to bottom\n  React.useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <div\n      className={cn(\n        \"flex h-80 flex-1 flex-col space-y-4 overflow-y-auto p-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n}\n\n// Empty state component\nfunction AiAssistantEmptyState({\n  className,\n  children,\n  suggestions = [],\n  ...props\n}: React.ComponentProps<\"div\"> & { suggestions?: string[] }) {\n  const { messages } = useAiAssistant();\n\n  if (messages.length > 0) return null;\n\n  return (\n    <div className={cn(\"py-8 text-center\", className)} {...props}>\n      {children || (\n        <>\n          <Bot className=\"text-muted-foreground mx-auto mb-4 h-12 w-12\" />\n          <p className=\"text-muted-foreground mb-4\">\n            Hi! How can I help you today?\n          </p>\n          {suggestions.length > 0 && (\n            <AiAssistantSuggestions suggestions={suggestions} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\n// Suggestions component\nfunction AiAssistantSuggestions({\n  suggestions,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & { suggestions: string[] }) {\n  const { isTyping, sendMessage, onMessageSent } = useAiAssistant();\n\n  const handleSuggestionClick = (suggestion: string) => {\n    if (isTyping) return;\n    onMessageSent?.(suggestion);\n    sendMessage({\n      role: \"user\",\n      parts: [{ type: \"text\", text: suggestion }],\n    });\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", className)} {...props}>\n      <p className=\"text-muted-foreground mb-2 text-sm\">Try asking:</p>\n      {suggestions.map((suggestion, index) => (\n        <button\n          key={index}\n          onClick={() => handleSuggestionClick(suggestion)}\n          className=\"hover:bg-accent block w-full rounded border p-2 text-left text-sm transition-colors\"\n        >\n          {suggestion}\n        </button>\n      ))}\n    </div>\n  );\n}\n\n// Message list component\nfunction AiAssistantMessageList({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  const { messages, isTyping, error } = useAiAssistant();\n\n  return (\n    <div className={cn(\"space-y-4\", className)} {...props}>\n      {messages.map((message, index) => (\n        <AiAssistantMessage key={message.id || index} message={message} />\n      ))}\n      {isTyping && <AiAssistantTypingIndicator />}\n      {error && <AiAssistantError error={error} />}\n    </div>\n  );\n}\n\n// Individual message component\nfunction AiAssistantMessage({\n  message,\n  className,\n  ...props\n}: React.ComponentProps<typeof motion.div> & { message: any }) {\n  // Helper function to render message content\n  const renderMessageContent = (message: any) => {\n    if (message.parts) {\n      return message.parts\n        .filter((part: any) => part.type === \"text\")\n        .map((part: any, i: number) => (\n          <div key={i} className=\"whitespace-pre-wrap\">\n            {part.text}\n          </div>\n        ));\n    }\n    return <div className=\"whitespace-pre-wrap\">{message.content || \"\"}</div>;\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      className={cn(\n        \"flex gap-3\",\n        message.role === \"user\" ? \"justify-end\" : \"justify-start\",\n        className\n      )}\n      {...props}\n    >\n      {message.role === \"assistant\" && (\n        <div className=\"flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-full bg-gradient-to-r from-blue-500 to-purple-500\">\n          <Bot className=\"h-4 w-4 text-white\" />\n        </div>\n      )}\n\n      <div\n        className={cn(\n          \"max-w-[80%] rounded-lg px-3 py-2 text-sm\",\n          message.role === \"user\"\n            ? \"bg-primary text-primary-foreground\"\n            : \"bg-muted text-muted-foreground\"\n        )}\n      >\n        {renderMessageContent(message)}\n      </div>\n\n      {message.role === \"user\" && (\n        <div className=\"bg-muted flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-full\">\n          <User className=\"h-4 w-4\" />\n        </div>\n      )}\n    </motion.div>\n  );\n}\n\n// Typing indicator component\nfunction AiAssistantTypingIndicator({ className }: { className?: string }) {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      className={cn(\"flex gap-3\", className)}\n    >\n      <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-r from-blue-500 to-purple-500\">\n        <Bot className=\"h-4 w-4 text-white\" />\n      </div>\n      <div className=\"bg-muted rounded-lg px-3 py-2\">\n        <div className=\"flex gap-1\">\n          {[0, 1, 2].map((i) => (\n            <motion.div\n              key={i}\n              animate={{ opacity: [0.4, 1, 0.4] }}\n              transition={{\n                duration: 1,\n                repeat: Infinity,\n                delay: i * 0.2,\n              }}\n              className=\"h-2 w-2 rounded-full bg-current\"\n            />\n          ))}\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n\n// Error component\nfunction AiAssistantError({\n  error,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & { error: any }) {\n  return (\n    <div\n      className={cn(\n        \"border-destructive/50 bg-destructive/10 text-destructive rounded-lg border p-3 text-sm\",\n        className\n      )}\n      {...props}\n    >\n      {error.message}\n    </div>\n  );\n}\n\n// Input form component\nfunction AiAssistantInput({\n  placeholder = \"Ask me anything...\",\n  maxLength = 1000,\n  className,\n  ...props\n}: React.ComponentProps<\"form\"> & {\n  placeholder?: string;\n  maxLength?: number;\n}) {\n  const { isTyping, sendMessage, onMessageSent } = useAiAssistant();\n  const [input, setInput] = React.useState(\"\");\n  const inputRef = React.useRef<HTMLTextAreaElement>(null);\n\n  // Auto-resize textarea\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = \"auto\";\n      inputRef.current.style.height =\n        Math.min(inputRef.current.scrollHeight, 120) + \"px\";\n    }\n  }, [input]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!input.trim() || isTyping) return;\n\n    const message = input.trim();\n    onMessageSent?.(message);\n    sendMessage({\n      role: \"user\",\n      parts: [{ type: \"text\", text: message }],\n    });\n    setInput(\"\");\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className={cn(\"border-t p-4\", className)}\n      {...props}\n    >\n      <div className=\"flex items-end gap-2\">\n        <div className=\"relative flex-1\">\n          <textarea\n            ref={inputRef}\n            value={input}\n            onChange={(e) => setInput(e.target.value.slice(0, maxLength))}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            className=\"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring max-h-[120px] min-h-[44px] w-full resize-none rounded-lg border p-3 pr-12 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            disabled={isTyping}\n            rows={1}\n          />\n          {input.length > maxLength * 0.8 && (\n            <div className=\"text-muted-foreground absolute bottom-2 right-2 text-xs\">\n              {input.length}/{maxLength}\n            </div>\n          )}\n        </div>\n        <button\n          type=\"submit\"\n          disabled={!input.trim() || isTyping}\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90 focus-visible:ring-ring inline-flex h-10 w-10 items-center justify-center rounded-lg transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\"\n        >\n          <Send className=\"h-4 w-4\" />\n        </button>\n      </div>\n    </form>\n  );\n}\n\n// Main AI Assistant component that combines everything\ninterface AiAssistantProps extends Omit<AiAssistantProviderProps, \"children\"> {\n  children?: React.ReactNode;\n  triggerProps?: Partial<AiAssistantTriggerProps>;\n  chatProps?: Partial<AiAssistantChatProps>;\n  title?: string;\n  placeholder?: string;\n  suggestions?: string[];\n  maxInputLength?: number;\n}\n\nfunction AiAssistant({\n  children,\n  triggerProps = {},\n  chatProps = {},\n  title = \"AI Assistant\",\n  placeholder = \"Ask me anything...\",\n  suggestions = [],\n  maxInputLength = 1000,\n  ...providerProps\n}: AiAssistantProps) {\n  return (\n    <AiAssistantProvider {...providerProps}>\n      {children || (\n        <>\n          <AiAssistantTrigger {...triggerProps} />\n          <AiAssistantChat {...chatProps}>\n            <AiAssistantHeader>\n              <AiAssistantHeaderTitle>{title}</AiAssistantHeaderTitle>\n              <AiAssistantHeaderActions />\n            </AiAssistantHeader>\n            <AiAssistantMessages>\n              <AiAssistantEmptyState suggestions={suggestions} />\n              <AiAssistantMessageList />\n            </AiAssistantMessages>\n            <AiAssistantInput\n              placeholder={placeholder}\n              maxLength={maxInputLength}\n            />\n          </AiAssistantChat>\n        </>\n      )}\n    </AiAssistantProvider>\n  );\n}\n\nexport {\n  AiAssistant,\n  AiAssistantProvider,\n  AiAssistantTrigger,\n  AiAssistantChat,\n  AiAssistantHeader,\n  AiAssistantHeaderTitle,\n  AiAssistantHeaderActions,\n  AiAssistantMessages,\n  AiAssistantEmptyState,\n  AiAssistantSuggestions,\n  AiAssistantMessageList,\n  AiAssistantMessage,\n  AiAssistantTypingIndicator,\n  AiAssistantError,\n  AiAssistantInput,\n  useAiAssistant,\n};\n",
      "type": "registry:component"
    }
  ]
}