{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flip-sentences",
  "type": "registry:component",
  "title": "Flip Sentences",
  "author": "ncdai <dai@chanhdai.com>",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "https://chanhdai.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/registry/flip-sentences/flip-sentences.tsx",
      "content": "\"use client\";\r\n\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport function FlipSentences({\r\n  className,\r\n  sentences,\r\n}: {\r\n  className?: string;\r\n  sentences: string[];\r\n}) {\r\n  const [currentSentence, setCurrentSentence] = useState(0);\r\n\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const startAnimation = () => {\r\n    intervalRef.current = setInterval(() => {\r\n      setCurrentSentence((prev) => (prev + 1) % sentences.length);\r\n    }, 2500);\r\n  };\r\n\r\n  useEffect(() => {\r\n    startAnimation();\r\n\r\n    const abortController = new AbortController();\r\n    const { signal } = abortController;\r\n\r\n    document.addEventListener(\r\n      \"visibilitychange\",\r\n      () => {\r\n        if (document.visibilityState !== \"visible\" && intervalRef.current) {\r\n          clearInterval(intervalRef.current); // Clear the interval when the tab is not visible\r\n          intervalRef.current = null;\r\n        } else if (document.visibilityState === \"visible\") {\r\n          setCurrentSentence((prev) => (prev + 1) % sentences.length); // Show the next sentence immediately\r\n          startAnimation(); // Restart the interval when the tab becomes visible\r\n        }\r\n      },\r\n      { signal }\r\n    );\r\n\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n      abortController.abort();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [sentences]);\r\n\r\n  return (\r\n    <AnimatePresence mode=\"wait\" initial={false}>\r\n      <motion.p\r\n        key={`current-sentence-${currentSentence}`}\r\n        className={cn(\r\n          \"font-mono text-sm text-balance text-muted-foreground select-none\",\r\n          className\r\n        )}\r\n        initial={{\r\n          y: 8,\r\n          opacity: 0,\r\n        }}\r\n        animate={{\r\n          y: 0,\r\n          opacity: 1,\r\n        }}\r\n        exit={{\r\n          y: -8,\r\n          opacity: 0,\r\n        }}\r\n        transition={{\r\n          duration: 0.3,\r\n          ease: \"linear\",\r\n        }}\r\n      >\r\n        {sentences[currentSentence]}\r\n      </motion.p>\r\n    </AnimatePresence>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}